http://ianmiell.github.io/git-101-tutorial/
https://stackoverflow.com/questions/6948573/git-format-patch-viewer
https://gist.github.com/patkujawa-wf/9960173#:~:text=git%20diff%20patch%20between%20branches.md%20If%20you%20want,the%20output%20redirect%3A%20git%20diff%20master..branch-name%20%3E%20branch-name.patch
https://blog.tomasfejfar.cz/git-how-to-make-master-empty/
https://stackabuse.com/git-revert-to-a-previous-commit/

https://tomkadwill.com/git-reset-or-git-pull


Git advanced commands
=====================

Git is a rare piece of software, something like it would be never seen in the near future.
In programming world it's hard to get time for properly implement anything in the first lifecycle.
Sometimes people will be stuck with complicated stuffs. And what if you are not comfortable with the enviroment itself, it will again add up the complexity of your development. 
I have a similar experience with git. One of my teammate merged the development code to the master repository before testing by mistake.

I reverted the git commits in master branch to one of the previous commit which was stable and tested previously. Luckily I had done some researches in
git revert and git reset just before the incident. So it was greatly helpful to me. So I thought of sharing my experience here with some advanced git commands that will make
git environment more friendly.

The below reference has been a great useful to me on doing this.
https://itnext.io/advanced-git-features-you-didnt-know-you-needed-ed8455c45495

Git log
========

To start with, git log. `git log` when executed without any flag will give all the commit history in a branch.
Why dont't we add some graphics to git! Let's add some graphic! Run the command  `git log --graph`
The above command will output the commit graph, in which asterisk points the commits and the lines `|` are yielded up on new commits are added on after the branching 
point. Similar ones will be created when commiting on the right branch.

Github adding public key and private key

https://docs.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent
